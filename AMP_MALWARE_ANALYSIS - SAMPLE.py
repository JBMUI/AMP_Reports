#Cisco AMP Threat Categorization & Report Generator
#Created By Jacob Barone
#May need xlsxwriter, regex, dateutil and requests modules

import json
import requests #needed to grab info from api
import xlsxwriter #needed for excel
import regex as re #needed to find detections
from collections import Counter
from datetime import datetime
from dateutil import parser #Needed to parse dates

#API and event info
client_id = 'YOUR_CLIENT_ID_HERE'
amp_api_key = 'YOUR_AMP_API_KEY_HERE'
event = '@api.amp.sourcefire.com/v1/events'
event_type = 'event_type[]=1090519054'



#Print URL for API
url = 'https://' + client_id + ':' + amp_api_key + event
print ('Connecting to URl: %s' % (url))


#Get the start and end date
start_date = input('Please Enter The Start Date For Your Search (YYYY-MM-DD): ')      
start_date = 'start_date=' + start_date + 'T00%3A00%3A00%2B00%3A00'
end_date = input('Please Enter the End Date For Your Search (YYYY-MM-DD): ')
end_date = end_date + ' 23:59:59+00:00'
dt = parser.parse(end_date)


#These two should cover a week
response = requests.get('https://' + client_id + ':' + amp_api_key + event + '?' + event_type + '&' + start_date)
response_next = requests.get('https://' + client_id + ':' + amp_api_key + event + '?' + event_type + '&' + start_date + '&offset=500')

#Make files for searching 
data = response.json()
with open('Analysis.json', 'w') as f:
    json.dump(data, f)

data2 = response_next.json()
with open('Analysis2.json', 'w') as f:
    json.dump(data2, f)


i = 0
with open('Analysis.json','r') as file:
    for result in re.finditer(r'\bdetection\b', file.read()):
        i += 1

p = 0
with open('Analysis2.json','r') as file:
    for result in re.finditer(r'\bdetection\b', file.read()):
        p += 1

total = p + i

print('Number of malware detections is: ' + str(total) + '\n')

malware_array = [0] * total
severity_array = [0] * total

#First + Second File Walkthrough if needed 
array_count = 0
null_counter = 0

while array_count!= i:
    json_date = data['data'][array_count]['date']
    FT1 = parser.parse(json_date)
    if dt >= FT1:
        json_severity = data['data'][array_count]['severity']
        json_detection = data['data'][array_count]['detection']
        malware_array[array_count] = json_detection
        severity_array[array_count] = json_severity 
        array_count += 1
    else:
        malware_array[array_count] = 'NULL'
        severity_array[array_count] = 'NULL'
        null_counter += 1
        array_count += 1

#Second File: Analysis 2 Walktrhough
array_count2 = 0

while array_count2!= p:
    json_date2 = data2['data'][array_count2]['date']
    FT2 = parser.parse(json_date2)
    if dt >= FT2:
        json_severity2 = data2['data'][array_count2]['severity']
        json_detection2 = data2['data'][array_count2]['detection']
        malware_array[array_count] = json_detection2
        severity_array[array_count] = json_severity2
        array_count += 1
        array_count2 += 1
    else:
        malware_array[array_count] = 'NULL'
        severity_array[array_count] = 'NULL'
        null_counter += 1
        array_count += 1
        array_count2 +=1

del malware_array[:null_counter]
del severity_array[:null_counter]
#Count each name, what is in top 10?
Counter = Counter(malware_array)
most_occur = Counter.most_common(10)

print('\nMost Common Malwares are: ')  
print(most_occur)



#Categorize each of the top 10

mal_name = [0] * 10 
mal_count = [0] * 10
mal_severity = [0] * 10

final_mal_cat = ['Trojan', 'Adware', 'Virus', 'PUA']
final_mal_count = [0] * 4

trojan_count = 0
adware_count = 0
pua_count = 0
virus_count = 0

#Loop for categorization

#***** VERY BASIC: FOR NOW ******
#Win, W32, and Trojan = Trojan
#PUA = PUA
#Adware = Adware
#Anything Else = Virus


occur_count = 0
while occur_count!= 10: #Change 10 to 4 when categorizing
    mal_name[occur_count], mal_count[occur_count] = (most_occur[occur_count])
    severity_spot = malware_array.index(mal_name[occur_count])
    mal_severity[occur_count] = severity_array[severity_spot]
    
    if mal_name[occur_count].startswith(('Win','W32','Trojan','trojan','Gen','XF','JS','Application')):
        trojan_count = trojan_count + mal_count[occur_count]
        
    elif mal_name[occur_count].startswith(('PUA', 'pua')):
        pua_count = pua_count + mal_count[occur_count]
        
    elif mal_name[occur_count].startswith(('Adware', 'adware')):
        adware_count = adware_count + mal_count[occur_count]
        
    else: 
        virus_count = virus_count + mal_count[occur_count]
        
    occur_count+= 1


final_mal_count[0] = trojan_count
final_mal_count[1] = adware_count
final_mal_count[2] = virus_count
final_mal_count[3] = pua_count

#Create Excel

print('Making You Malware Report. Please Wait.....')

row = 1
column = 0
workbook = xlsxwriter.Workbook('Malware_Report.xlsx')
worksheet = workbook.add_worksheet()
bold = workbook.add_format({'bold': True})
worksheet.write('A1', 'Top 10 Threats', bold)
worksheet.write('E1', 'Categories for Top 10', bold)

for item in mal_name:
    worksheet.write(row, column, item)
    row += 1
    
row = 1
column += 1
for item in mal_severity:
    worksheet.write(row, column, item)
    row += 1

row = 1
column += 1
for item in mal_count:
    worksheet.write(row, column, item)
    row += 1

row = 1
column += 2
for item in final_mal_cat:
    worksheet.write(row, column, item)
    row += 1
    
row = 1
column += 1
for item in final_mal_count:
    worksheet.write(row, column, item)
    row += 1

chart1 = workbook.add_chart({'type': 'pie'}) #change to bar for a bar chart

chart1.add_series({
    'name': 'Top Malware Threats for Solenis',
    'categories': '=Sheet1!$E$2:$E$5',
    'values': '=Sheet1!$F$2:$F$5',
    'data_labels':{'position':'outside_end','value':True,'percentage':True,'category':True,}
    #,'percentage':True added if you want percents
})
chart1.set_title({'name': 'Threats in our Environment'})
worksheet.insert_chart('G2', chart1, {'x_offset': 25, 'y_offset': 10})

workbook.close()

print('Malware Report Complete')




